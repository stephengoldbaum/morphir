// FAIR Serialization Specification

// Define supported serialization formats
def SerializationFormat {
  variant {
    // Human-readable JSON-like format
    Text {
      prettyPrint: Boolean
      includeComments: Boolean
    }
    // Efficient binary format
    Binary {
      compression: CompressionType
      version: Int
    }
    // Protocol Buffers format for tool interop
    Protobuf {
      version: Int
    }
  }
}

def CompressionType {
  variant {
    None
    Gzip
    Lz4
  }
}

// Serialization metadata
def SerializationHeader {
  version: Int
  format: SerializationFormat
  timestamp: String
  checksum: String
}

// Define how FAIR definitions are serialized
def SerializedDefinition {
  name: String
  genericParams: List<String>
  content: DefinitionContent
  rules: List<SerializedRule>
}

def DefinitionContent {
  variant {
    // For regular type definitions
    Properties {
      fields: Map<String, SerializedType>
    }
    // For variant types
    Variants {
      cases: Map<String, SerializedType>
    }
    // For rule definitions
    Rules {
      conditions: List<SerializedCondition>
    }
  }
}

def SerializedType {
  variant {
    Basic {
      name: String
    }
    Generic {
      base: String
      params: List<SerializedType>
    }
    List {
      elementType: SerializedType
    }
    Map {
      keyType: SerializedType
      valueType: SerializedType
    }
  }
}

def SerializedRule {
  name: String
  conditions: List<SerializedCondition>
  assertions: List<SerializedAssertion>
}

def SerializedCondition {
  variant {
    Exists {
      variable: String
      type: SerializedType
    }
    ForAll {
      variable: String
      type: SerializedType
      body: List<SerializedCondition>
    }
    Require {
      expression: SerializedExpression
    }
  }
}

// Text format example:
/*
{
  "header": {
    "version": 1,
    "format": {"type": "Text", "prettyPrint": true},
    "timestamp": "2025-02-28T15:18:19-05:00",
    "checksum": "sha256:..."
  },
  "definitions": [
    {
      "name": "Option",
      "genericParams": ["T"],
      "content": {
        "type": "Variants",
        "cases": {
          "Some": {"type": "Generic", "base": "T"},
          "None": null
        }
      },
      "rules": [
        {
          "name": "OptionPatternMatch",
          "conditions": [
            {
              "type": "ForAll",
              "variable": "match",
              "type": "PatternMatch",
              "body": [
                {
                  "type": "Require",
                  "expression": "covers(match, ['Some', 'None'])"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
*/

// Rules for serialization
rules {
  // Version compatibility
  VersionCompatibility {
    forall serialized: SerializedDefinition {
      require serialized.version <= currentVersion
    }
  }

  // Checksum validation
  ChecksumValidation {
    forall header: SerializationHeader {
      require validateChecksum(header.checksum, serialized.content)
    }
  }

  // Generic parameter consistency
  GenericConsistency {
    forall def: SerializedDefinition {
      forall type: SerializedType {
        where type is Generic {
          require type.params.all in def.genericParams
        }
      }
    }
  }
}

// Serialization operations
def Operations {
  // Save a FAIR specification to a file
  def save {
    spec: List<SerializedDefinition>
    format: SerializationFormat
    path: String
    returns: Result<SerializationError, Unit>
  }

  // Load a FAIR specification from a file
  def load {
    path: String
    returns: Result<SerializationError, List<SerializedDefinition>>
  }

  // Convert between formats
  def convert {
    input: SerializedDefinition
    fromFormat: SerializationFormat
    toFormat: SerializationFormat
    returns: Result<SerializationError, SerializedDefinition>
  }
}

def SerializationError {
  variant {
    InvalidFormat {
      details: String
    }
    VersionMismatch {
      expected: Int
      actual: Int
    }
    ChecksumMismatch {
      expected: String
      actual: String
    }
    IOError {
      message: String
    }
  }
}
